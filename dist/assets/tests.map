{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","rarwe/tests/acceptance/bands-test.js","rarwe/tests/acceptance/login-test.js","rarwe/tests/acceptance/sign-up-test.js","rarwe/tests/app.lint-test.js","rarwe/tests/helpers/custom-helpers.js","rarwe/tests/helpers/ember-simple-auth.js","rarwe/tests/integration/components/star-rating-test.js","rarwe/tests/integration/helpers/capitalize-test.js","rarwe/tests/test-helper.js","rarwe/tests/tests.lint-test.js","rarwe/tests/unit/controllers/bands/band/songs-test.js","rarwe/tests/unit/controllers/login-test.js","rarwe/tests/unit/models/band-test.js","rarwe/tests/unit/routes/bands-test.js","rarwe/tests/unit/routes/bands/band-test.js","rarwe/tests/unit/validators/year-of-formation-test.js","vendor/ember-cli/app-config.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('rarwe/tests/acceptance/bands-test', ['qunit', '@ember/test-helpers', 'rarwe/tests/helpers/custom-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage'], function (_qunit, _testHelpers, _customHelpers, _emberQunit, _setupMirage) {\n  'use strict';\n\n  //import needed test helpers\n  //trigger visit, click, and filling in of a text input\n  (0, _qunit.module)('Acceptance | Bands', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('List bands', async function (assert) {\n      //how we access mirage\n      this.server.create('band', { name: 'Radiohead' });\n      this.server.create('band', { name: 'Long Distance Calling' });\n      //test redirection\n      await (0, _customHelpers.loginAs)('dave@tcv.com');\n      await (0, _testHelpers.visit)('/');\n\n      assert.dom('[data-test-rr=band-link]').exists({ count: 2 }, 'All band links are rendered');\n\n      assert.dom('[data-test-rr=band-list-item]:first-child').hasText(\"Radiohead\", 'The first band link contains the band name');\n\n      assert.dom('[data-test-rr=band-list-item]:last-child').hasText(\"Long Distance Calling\", 'The other band link contains the band name');\n    });\n\n    (0, _qunit.test)('Create a band', async function (assert) {\n      this.server.create('band', { name: 'Royal Blood' });\n\n      await (0, _customHelpers.loginAs)('dave@tcv.com');\n      await (0, _testHelpers.visit)('/');\n      await (0, _customHelpers.createBand)('Caspian');\n\n      assert.dom('[data-test-rr=band-list-item]').exists({ count: 2 }, 'A new band link is rendered');\n\n      assert.dom('[data-test-rr=band-list-item]:last-child').hasText('Caspian', 'The new band link is rendered as the last item');\n\n      assert.dom('[data-test-rr=songs-nav-item] > .active').hasText('Songs', 'The Songs tab is active');\n    });\n\n    (0, _qunit.test)('Sort songs in various ways', async function (assert) {\n      let band = this.server.create('band', { name: 'Them Crooked Vultures' });\n      this.server.create('song', { title: 'Elephants', rating: 5, band });\n      this.server.create('song', { title: 'New Fang', rating: 4, band });\n      this.server.create('song', { title: 'Mind Eraser, No Chaser', rating: 4, band });\n      this.server.create('song', { title: 'Spinning In Daffodils', rating: 5, band });\n\n      await (0, _customHelpers.loginAs)('dave@tcv.com');\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)('[data-test-rr=band-link]');\n      assert.equal((0, _testHelpers.currentURL)(), '/bands/1/songs');\n\n      assert.dom('[data-test-rr=song-list-item]:first-child').hasText('Elephants', 'The first song is the highest ranked, first one in the alphabet');\n\n      assert.dom('[data-test-rr=song-list-item]:last-child').hasText('New Fang', 'The last song is the lowest ranked, last one in the alphabet');\n\n      await (0, _testHelpers.click)('[data-test-rr=sort-by-title-desc]');\n      assert.equal((0, _testHelpers.currentURL)(), '/bands/1/songs?sort=titleDesc');\n\n      assert.dom('[data-test-rr=song-list-item]:first-child').hasText('Spinning In Daffodils', 'The first song is the one that comes last in the alphabet');\n\n      assert.dom('[data-test-rr=song-list-item]:last-child').hasText('Elephants', 'The last song is the one that comes first in the alphabet');\n\n      await (0, _testHelpers.click)('[data-test-rr=sort-by-rating-asc]');\n      assert.equal((0, _testHelpers.currentURL)(), '/bands/1/songs?sort=ratingAsc');\n\n      assert.dom('[data-test-rr=song-list-item]:first-child').hasText('Mind Eraser, No Chaser', 'The first song is the lowest ranked, first one in the alphabet');\n\n      assert.dom('[data-test-rr=song-list-item]:last-child').hasText('Spinning In Daffodils', 'The last song is the highest ranked, last one in the alphabet');\n\n      await (0, _testHelpers.click)('[data-test-rr=sort-by-title-asc]');\n      assert.equal((0, _testHelpers.currentURL)(), '/bands/1/songs?sort=titleAsc');\n\n      assert.dom('[data-test-rr=song-list-item]:first-child').hasText('Elephants', 'The first song is first in the alphabet');\n\n      assert.dom('[data-test-rr=song-list-item]:last-child').hasText('Spinning In Daffodils', 'The last song is last in the alphabet');\n    });\n\n    (0, _qunit.test)('Search songs', async function (assert) {\n      let band = this.server.create('band', { name: 'Them Crooked Vultures' });\n      this.server.create('song', { title: 'Elephants', rating: 5, band });\n      this.server.create('song', { title: 'New Fang', rating: 4, band });\n      this.server.create('song', { title: 'Mind Eraser, No Chaser', rating: 4, band });\n      this.server.create('song', { title: 'Spinning In Daffodils', rating: 5, band });\n      this.server.create('song', { title: 'No One Loves Me & Neither Do I', rating: 5, band });\n\n      await (0, _customHelpers.loginAs)('dave@tcv.com');\n      await (0, _testHelpers.visit)('/');\n      await (0, _testHelpers.click)('[data-test-rr=band-link]');\n      await (0, _testHelpers.fillIn)('[data-test-rr=search-box', 'no');\n\n      assert.dom('[data-test-rr=song-list-item]').exists({ count: 2 }, 'The songs matching the search term are displayed');\n\n      await (0, _testHelpers.click)('[data-test-rr=sort-by-title-desc');\n\n      assert.dom('[data-test-rr=song-list-item]:first-child').hasText('No One Loves Me & Neither Do I', 'A matching song that comes later in the alphabet appears on top');\n\n      assert.dom('[data-test-rr=song-list-item]:last-child').hasText('Mind Eraser, No Chaser', 'A matching song that comes sooner in the alphabet appears at the bottom');\n    });\n\n    (0, _qunit.test)('Visit landing page without signing in', async function (assert) {\n      await (0, _testHelpers.visit)('/');\n\n      assert.dom('[data-test-rr=form-header]').hasText('Log in to R&R');\n      assert.dom('[data-test-rr=user-email]').doesNotExist();\n    });\n  }); //testing framework\n});","define('rarwe/tests/acceptance/login-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage'], function (_qunit, _testHelpers, _emberQunit, _setupMirage) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | Login', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('Log in with valid credentials', async function (assert) {\n      let email = 'dave@tcv.com';\n      let password = 'ThemCr00ked!';\n      this.server.create('user', { email, password });\n\n      await (0, _testHelpers.visit)('/login');\n      await (0, _testHelpers.fillIn)('#email', email);\n      await (0, _testHelpers.fillIn)('#password', password);\n      await (0, _testHelpers.click)('[data-test-rr=login-button]');\n\n      assert.dom('[data-test-rr=bands-empty-message]').hasText(\"Let's start by creating a band.\", \"A descriptive empty message is shown\");\n\n      assert.dom('[data-test-rr=user-email]').hasText('dave@tcv.com', \"The logged in user's email is shown\");\n\n      await (0, _testHelpers.click)('[data-test-rr=logout]');\n\n      assert.dom('[data-test-rr=form-header]').hasText('Log in to R&R');\n      assert.dom('[data-test-rr=user-email]').doesNotExist();\n    });\n\n    (0, _qunit.test)('Login client-side errors', async function (assert) {\n      await (0, _testHelpers.visit)('/login');\n\n      await (0, _testHelpers.fillIn)('#email', 'dave#tcv.com');\n      await (0, _testHelpers.triggerEvent)('#email', 'blur');\n      assert.dom('[data-test-rr=email-error]').hasText('Email should be a valid email', 'Email error is displayed');\n\n      await (0, _testHelpers.fillIn)('#password', 'crooked');\n      await (0, _testHelpers.triggerEvent)('#password', 'blur');\n      assert.dom('[data-test-rr=password-error]').hasText('Password should be at least 8 characters', 'Password error is displayed');\n\n      await (0, _testHelpers.fillIn)('#email', 'dave@tcv.com');\n      assert.dom('[data-test-rr=email-error]').hasText('', 'Email error is no longer displayed');\n\n      await (0, _testHelpers.fillIn)('#password', 'ThemCr00ked!');\n      assert.dom('[data-test-rr=password-error]').hasText('', 'Password error is no longer displayed');\n    });\n  });\n});","define('rarwe/tests/acceptance/sign-up-test', ['qunit', '@ember/test-helpers', 'ember-qunit', 'ember-cli-mirage/test-support/setup-mirage'], function (_qunit, _testHelpers, _emberQunit, _setupMirage) {\n  'use strict';\n\n  (0, _qunit.module)('Acceptance | Sign up', function (hooks) {\n    (0, _emberQunit.setupApplicationTest)(hooks);\n    (0, _setupMirage.default)(hooks);\n\n    (0, _qunit.test)('Successful sign up', async function (assert) {\n      await (0, _testHelpers.visit)('/sign-up');\n      await (0, _testHelpers.fillIn)('#email', 'dave@tcv.com');\n      await (0, _testHelpers.fillIn)('#password', 'ThemCr00ked!');\n      await (0, _testHelpers.click)('[data-test-rr=sign-up-button]');\n\n      assert.dom('[data-test-rr=form-header]').hasText('Log in to R&R', \"User is redirected to log in\");\n    });\n\n    (0, _qunit.test)('Sign up client-side errors', async function (assert) {\n      await (0, _testHelpers.visit)('/sign-up');\n\n      await (0, _testHelpers.fillIn)('#email', 'dave#tcv.com');\n      await (0, _testHelpers.triggerEvent)('#email', 'blur');\n      assert.dom('[data-test-rr=email-error]').hasText('Email should be a valid email', 'Email error is displayed');\n\n      await (0, _testHelpers.fillIn)('#password', 'crooked');\n      await (0, _testHelpers.triggerEvent)('#password', 'blur');\n      assert.dom('[data-test-rr=password-error]').hasText('Password should be at least 8 characters', 'Password error is displayed');\n\n      await (0, _testHelpers.fillIn)('#email', 'dave@tcv.com');\n      assert.dom('[data-test-rr=email-error]').hasText('', 'Email error is no longer displayed');\n\n      await (0, _testHelpers.fillIn)('#password', 'ThemCr00ked!');\n      assert.dom('[data-test-rr=password-error]').hasText('', 'Password error is no longer displayed');\n    });\n  });\n});","define('rarwe/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('adapters/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'adapters/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/credentials.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/credentials.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/star-rating.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'components/star-rating.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands/band/details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands/band/details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/bands/band/songs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/bands/band/songs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/sign-up.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/sign-up.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/capitalize.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/capitalize.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/band.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/band.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/song.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/song.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/user.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/user.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/details.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/details.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/bands/band/songs.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/bands/band/songs.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/logout.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/logout.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/sign-up.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/sign-up.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/extract-server-error.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/extract-server-error.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('utils/wait.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'utils/wait.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('validations/email-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validations/email-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('validations/password-field.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validations/password-field.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('validators/year-of-formation.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'validators/year-of-formation.js should pass ESLint\\n\\n');\n  });\n});","define('rarwe/tests/helpers/custom-helpers', ['exports', '@ember/test-helpers', 'ember-simple-auth/test-support'], function (exports, _testHelpers, _testSupport) {\n    'use strict';\n\n    Object.defineProperty(exports, \"__esModule\", {\n        value: true\n    });\n    exports.createBand = createBand;\n    exports.loginAs = loginAs;\n    async function createBand(name) {\n        await (0, _testHelpers.click)('[data-test-rr=new-band-label]');\n        await (0, _testHelpers.fillIn)('[data-test-rr=new-band-input]', name);\n        return (0, _testHelpers.click)('[data-test-rr=new-band-button]');\n    }\n\n    async function loginAs(email) {\n        return (0, _testSupport.authenticateSession)({ token: 'a.signed.jwt', userEmail: email });\n    }\n});","define('rarwe/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  const TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    const authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    const { __container__: container } = app;\n    const session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return app.testHelpers.wait();\n  }\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  }\n\n  function invalidateSession(app) {\n    const session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return app.testHelpers.wait();\n  }\n});","define('rarwe/tests/integration/components/star-rating-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Component | star-rating', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    (0, _qunit.test)('Renders the full and empty stars correctly', async function (assert) {\n      this.set('rating', 4);\n      this.set('maxRating', 5);\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"cZAAUXyg\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"star-rating\\\",null,[[\\\"rating\\\",\\\"maxRating\\\"],[[23,[\\\"rating\\\"]],[23,[\\\"maxRating\\\"]]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.dom('.fa-star').exists({ count: 4 }, 'The right amount of full stars is rendered');\n      assert.dom('.fa-star-o').exists({ count: 1 }, 'The right amount of empty stars is rendered');\n\n      this.set('maxRating', 10);\n\n      assert.dom('.fa-star').exists({ count: 4 }, 'The right amount of full stars is rendered after changing maxRating');\n      assert.dom('.fa-star-o').exists({ count: 6 }, 'The right amount of empty stars is rendered after changing maxRating');\n\n      this.set('rating', 2);\n\n      assert.dom('.fa-star').exists({ count: 2 }, 'The right amount of full stars is rendered after changing rating');\n      assert.dom('.fa-star-o').exists({ count: 8 }, 'The right amount of empty stars is rendered after changing rating');\n    });\n\n    (0, _qunit.test)('The setRating action', async function (assert) {\n      this.set('song', Ember.Object.create({ rating: 3 }));\n      this.set('actions', {\n        updateRating(song, rating) {\n          song.set('rating', rating);\n        }\n      });\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"kvGoyrLP\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"star-rating\\\",null,[[\\\"rating\\\",\\\"onClick\\\"],[[23,[\\\"rating\\\"]],[27,\\\"action\\\",[[22,0,[]],\\\"updateRating\\\",[23,[\\\"song\\\"]]],null]]]],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n      await (0, _testHelpers.click)('[data-test-rr=star-rating-5]');\n      assert.equal(this.get('song.rating'), 5, \"The clicked star's rating is correctly sent\");\n    });\n  });\n});","define('rarwe/tests/integration/helpers/capitalize-test', ['qunit', 'ember-qunit', '@ember/test-helpers'], function (_qunit, _emberQunit, _testHelpers) {\n  'use strict';\n\n  (0, _qunit.module)('Integration | Helper | capitalize', function (hooks) {\n    (0, _emberQunit.setupRenderingTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it renders', async function (assert) {\n      this.set('inputValue', '1234');\n\n      await (0, _testHelpers.render)(Ember.HTMLBars.template({\n        \"id\": \"JTP2SijC\",\n        \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[27,\\\"capitalize\\\",[[23,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n        \"meta\": {}\n      }));\n\n      assert.equal(this.element.textContent.trim(), '1234');\n    });\n  });\n});","define('rarwe/tests/test-helper', ['rarwe/app', 'rarwe/config/environment', '@ember/test-helpers', 'ember-qunit'], function (_app, _environment, _testHelpers, _emberQunit) {\n  'use strict';\n\n  (0, _testHelpers.setApplication)(_app.default.create(_environment.default.APP));\n\n  (0, _emberQunit.start)();\n});","define('rarwe/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/bands-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/bands-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/sign-up-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/sign-up-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/custom-helpers.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/custom-helpers.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/star-rating-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/star-rating-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/capitalize-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/capitalize-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/bands/band/songs-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/bands/band/songs-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/login-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/login-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/band-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/band-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bands-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bands-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/bands/band-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/bands/band-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/validators/year-of-formation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/validators/year-of-formation-test.js should pass ESLint\\n\\n');\n  });\n});","define('rarwe/tests/unit/controllers/bands/band/songs-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  //singleton test\n\n  (0, _qunit.module)('Unit | Controller | bands/band/songs', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('isAddButtonDisabled', function (assert) {\n      //fetch single controller instance\n      let controller = this.owner.lookup('controller:bands/band/songs');\n\n      controller.set('newSongTitle', 'Belenos');\n      assert.notOk(controller.get('isAddButtonDisabled'), 'The button is not disabled when there is a title');\n      controller.set('newSongTitle', '');\n      assert.ok(controller.get('isAddButtonDisabled'), 'The button is disabled when the title is empty');\n    });\n  });\n});","define('rarwe/tests/unit/controllers/login-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Controller | login', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      let controller = this.owner.lookup('controller:login');\n      assert.ok(controller);\n    });\n  });\n});","define('rarwe/tests/unit/models/band-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Model | Band', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('#isGreatBand', function (assert) {\n      //difference for nonsingleton test:\n      let store = this.owner.lookup('service:store');\n      let pearlJam = Ember.run(() => {\n        let songs = [store.createRecord('song', { title: 'Daughter', rating: 5 }), store.createRecord('song', { title: 'Rearviewmirror', rating: 4 }), store.createRecord('song', { title: 'Who You Are', rating: 2 })];\n        return store.createRecord('band', { songs: Ember.A(songs) });\n      });\n      assert.ok(pearlJam.get('isGreatBand'), 'A band with 2 or more good songs is a great band');\n\n      let stiltskin = Ember.run(() => {\n        let songs = [store.createRecord('song', { title: 'Inside', rating: 5 })];\n        return store.createRecord('band', { songs: Ember.A(songs) });\n      });\n      assert.notOk(stiltskin.get('isGreatBand'), 'A band with less than 2 good songs is not a great band');\n    });\n  });\n});","define('rarwe/tests/unit/routes/bands-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bands', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bands');\n      assert.ok(route);\n    });\n  });\n});","define('rarwe/tests/unit/routes/bands/band-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Route | bands/band', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    (0, _qunit.test)('it exists', function (assert) {\n      let route = this.owner.lookup('route:bands/band');\n      assert.ok(route);\n    });\n  });\n});","define('rarwe/tests/unit/validators/year-of-formation-test', ['qunit', 'ember-qunit'], function (_qunit, _emberQunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Validator | year-of-formation', function (hooks) {\n    (0, _emberQunit.setupTest)(hooks);\n\n    // Replace this with your real tests.\n    (0, _qunit.test)('it exists', function (assert) {\n      const validator = this.owner.lookup('validator:year-of-formation');\n      assert.ok(validator);\n    });\n  });\n});","define('rarwe/config/environment', [], function() {\n  var prefix = 'rarwe';\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = document.querySelector('meta[name=\"' + metaName + '\"]').getAttribute('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  var exports = { 'default': config };\n\n  Object.defineProperty(exports, '__esModule', { value: true });\n\n  return exports;\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n});\n","require('rarwe/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingsxGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjBA;AACA;","file":"tests.js"}